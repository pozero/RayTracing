#version 460

#extension GL_EXT_scalar_block_layout: require

#include "aabb.glsl"
#include "material.glsl"
#include "geometry.glsl"
#include "random.glsl"
#include "uniform_voxel.glsl"

#define RAY_BOUNCE_MAX_COUNT 10

struct ray_t {
    vec3 origin;
    vec3 direction;
};

vec3 ray_at(const in ray_t ray,
            const in float t) {
    return ray.origin + t * ray.direction;
}

struct hit_record_t {
    vec3 point;
    // normal always points against ray direction
    vec3 normal;
    material_t material;
    float t;
    bool front_face;
};

hit_record_t empty_hit_record() {
    return hit_record_t(
        vec3(0.0, 0.0, 0.0),
        vec3(0.0, 0.0, 0.0),
        empty_material(),
        0.0,
        false
    );
}

void hit_record_set_front_face(inout hit_record_t record, 
                               const in ray_t ray,
                               const in vec3 outward_normal) {
    record.front_face = dot(ray.direction, outward_normal) < 0.0;
    record.normal = record.front_face ? outward_normal : -outward_normal;
}

bool hit_aabb(const in aabb_t aabb,
              const in ray_t ray,
              inout float t_min,
              inout float t_max) {
    for (int a = 0; a < 3; ++ a) {
        const float inv_d = 1.0 / ray.direction[a];
        const int negative_inv_d = int(inv_d < 0.0);
        const float orig = ray.origin[a];
        const vec2 interval = get_aabb_interval(aabb, a);
        const float t0 = (interval[negative_inv_d] - orig) * inv_d;
        const float t1 = (interval[1 - negative_inv_d] - orig) * inv_d;
        t_min = max(t0, t_min);
        t_max = min(t1, t_max);
    }
    return t_min <= t_max;
}

bool hit_sphere(const in sphere_t sphere, 
                const in ray_t ray, 
                const in float t_min,
                const in float t_max,
                out hit_record_t record) {
    const vec3 oc = ray.origin - sphere.center;
    const float a = dot(ray.direction, ray.direction);
    const float half_b = dot(oc, ray.direction);
    const float c = dot(oc, oc) - sphere.radius * sphere.radius;
    const float discriminant = half_b * half_b - a * c;
    if (discriminant < 0.0) {
        return false;
    } else {
        float t = (-half_b - sqrt(discriminant)) / a;
        if (t < t_min || t > t_max) {
            t = (-half_b + sqrt(discriminant)) / a;
            if (t < t_min || t > t_max) {
                return false;
            }
        }
        record.t = t;
        record.point = ray_at(ray, record.t);
        const vec3 outward_normal = (record.point - sphere.center) / sphere.radius;
        hit_record_set_front_face(record, ray, outward_normal);
        record.material = sphere.material;
        return true;
    }
}

vec3 gradient_background(const in vec3 top_color,
                         const in vec3 bottom_color,
                         const in ray_t ray) {
    const float a = 0.5 * (ray.direction.y + 1.0);
    return a * top_color + (1.0 - a) * bottom_color;
}

bool near_zero(const in vec3 vector) {
    const float mu = 1e-8;
    return abs(vector.x) < mu &&
           abs(vector.y) < mu &&
           abs(vector.z) < mu;
}

// vec3 reflect(in vec3 v, 
//             in vec3 n) {
//    return v - 2 * dot(v, n) * n;
// }

// vec3 refract(in vec3 uv, 
//             in vec3 n, 
//             in float etai_over_etat) {
//    const float cos_theta = min(dot(-uv, n), 1.0);
//    const vec3 r_out_perp =  etai_over_etat * (uv + cos_theta*n);
//    const vec3 r_out_parallel = -sqrt(abs(1.0 - dot(r_out_perp, r_out_perp))) * n;
//    return r_out_perp + r_out_parallel;
// }

float reflectance(const in float cosine, 
                  const in float refraction_ratio) {
    // Use Schlick's approximation for reflectance.
    float r0 = (1 - refraction_ratio) / (1 + refraction_ratio);
    r0 = r0 * r0;
    return r0 + (1 - r0) * 
                (1 - cosine) *
                (1 - cosine) *
                (1 - cosine) *
                (1 - cosine) *
                (1 - cosine);
}

vec3 scatter(inout ray_t ray,
             const in hit_record_t hit_record) {
    switch (hit_record.material.type) {
        case MATERIAL_LAMBERTIAN:
            ray.origin = hit_record.point;
            ray.direction = normalize(hit_record.normal + 
                                      rand_vector_on_unit_sphere(hit_record.point.xy,
                                                                 hit_record.point.xz));
            if (near_zero(ray.direction)) {
                ray.direction = hit_record.normal;
            }
            return hit_record.material.albedo.xyz;
        case MATERIAL_METAL:
            ray.origin = hit_record.point;
            const vec3 reflected = reflect(ray.direction, hit_record.normal) + 
                                   hit_record.material.fuzz *
                                       rand_vector_on_unit_sphere(hit_record.point.xy,
                                                                 hit_record.point.xz);
            ray.direction = reflected;
            return hit_record.material.albedo.xyz;
        case MATERIAL_DIELECTRIC:
            ray.origin = hit_record.point;
            const float refraction_ratio = hit_record.front_face ? 
                1.0 / hit_record.material.refraction_index :
                hit_record.material.refraction_index;
            const float cos_theta = min(dot(-ray.direction, hit_record.normal), 1.0);
            const float sin_theta = sqrt(1 - cos_theta * cos_theta);
            if (refraction_ratio * sin_theta > 1.0 ||
                reflectance(cos_theta, refraction_ratio) > rand_01(hit_record.point.xy)) {
                ray.direction = reflect(ray.direction, hit_record.normal);
            } else {
                ray.direction = refract(ray.direction, 
                                        hit_record.normal, 
                                        refraction_ratio);
            }
            return vec3(1.0, 1.0, 1.0);
    }
}

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D img_output;

layout(std430, binding = 0) uniform camera {
    vec3 pixel_delta_u;
    vec3 pixel_delta_v;
    vec3 upper_left_pixel;
    vec3 camera_position;
    float accumulated_scalar;
};

layout(std430, binding = 1) uniform sphere_geometries {
    sphere_t spheres[SPHERE_COUNT];
};

void main() {
    const ivec2 tex_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec3 pixel = upper_left_pixel + 
                 tex_coord.x * pixel_delta_u + 
                 tex_coord.y * pixel_delta_v;

    const float sample_offset_x = -0.5 + rand_01(vec2(gl_GlobalInvocationID.x, accumulated_scalar));
    const float sample_offset_y = -0.5 + rand_01(vec2(gl_GlobalInvocationID.y, 1.0f - accumulated_scalar));
    const vec3 pixel_sample_offset = sample_offset_x * pixel_delta_u + 
                                     sample_offset_y * pixel_delta_v;
    const vec3 pixel_sample = pixel + pixel_sample_offset;
    ray_t ray = ray_t(camera_position, normalize(pixel_sample - camera_position));
    
    vec3 destination_color = vec3(0.0, 0.0, 0.0);
    vec3 accumulated_attenuation = vec3(1.0, 1.0, 1.0);
    #pragma optionNV (unroll all)
    for (int iter = 0; iter < RAY_BOUNCE_MAX_COUNT; ++ iter) {
        const float t_min = 0.001;
        float t_max = 1.0 / 0.0;
        hit_record_t hit_record = empty_hit_record();
        bool hit_anything = false;
        #pragma optionNV (unroll all)
        for (int sphere_idx = 0; sphere_idx < SPHERE_COUNT; ++ sphere_idx) {
            if (hit_sphere(spheres[sphere_idx], ray, t_min, t_max, hit_record)) {
                t_max = hit_record.t;
                hit_anything = true;
            }
        }
        if (hit_anything) {
            const vec3 attenuation = scatter(ray, hit_record);
            accumulated_attenuation = attenuation * accumulated_attenuation;
        } else {
            const vec3 background_color = gradient_background(vec3(0.5, 0.7, 1.0), 
                                                              vec3(1.0, 1.0, 1.0),
                                                              ray);
            destination_color += accumulated_attenuation * background_color;
            break;
        }
    }
    const vec3 source_color = imageLoad(img_output, tex_coord).xyz;
    imageStore(img_output, 
               tex_coord, 
               vec4(source_color + destination_color, 1.0));
}
